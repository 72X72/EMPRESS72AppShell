import os, traceback
from datetime import datetime

def log(message):
    with open("empress_log.txt", "a") as f:
        f.write(f"[{datetime.now().strftime('%a %b %d %H:%M:%S %Y')}] {message}\n")

def backup_cockpit():
    try:
        os.system("cp empress72_cockpit.py empress72_cockpit.bak")
        log("🛡️ Cockpit backup created.")
    except Exception as e:
        log("❌ Backup failed: " + str(e))

def scout_new_terrain():
    platforms = {
        "GPoint": {"payout": 1.25, "api": True},
        "Lootably": {"payout": 0.85, "api": False},
        "InstaGC": {"payout": 1.10, "api": True},
        "OfferNation": {"payout": 0.45, "api": False}
    }
    worthy = [name for name, data in platforms.items() if data["payout"] >= 1.00 and data["api"]]
    rejected = [name for name in platforms if name not in worthy]
    log(f"🧭 Dynasty expansion scouted: {worthy}")
    return worthy, rejected

def generate_limb(name):
    try:
        filename = f"empress72_{name.lower()}_limb.py"
        with open(filename, "w") as f:
            f.write(f"# 🧬 Autogenerated limb for {name}\n")
            f.write("def sweep():\n")
            f.write(f"    print('Sweeping {name} terrain...')\n")
        log(f"🧬 Limb sealed: {filename}")
        return filename
    except Exception as e:
        log(f"❌ Limb generation failed for {name}: {str(e)}")

def inject_to_cockpit(limb_files):
    try:
        backup_cockpit()
        with open("empress72_cockpit.py", "r") as f:
            existing = f.read()
        with open("empress72_cockpit.py", "a") as f:
            for limb in limb_files:
                import_line = f"from {limb.replace('.py','')} import sweep\n"
                if import_line not in existing:
                    f.write(import_line)
                    log(f"👑 Limb injected: {limb}")
                else:
                    log(f"🔁 Limb already present: {limb}")
        log("✅ Dynasty limbs injected into cockpit.")
    except Exception as e:
        log("❌ Cockpit injection failed: " + str(e))
        log(traceback.format_exc())

def governance_report(worthy, rejected):
    try:
        with open("empress_governance.txt", "a") as f:
            f.write(f"\n{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} — Dynasty Expansion\n")
            f.write(f"👑 Absorbed: {worthy}\n🛑 Rejected: {rejected}\n")
        log("📜 Governance report updated.")
    except Exception as e:
        log("❌ Governance report failed: " + str(e))

def cinematic_override(limb_files):
    if limb_files:
        try:
            with open("empress_cinematic.txt", "a") as f:
                f.write(f"\n🎥 {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} DYNASTY EXPANSION\n")
                for limb in limb_files:
                    f.write(f"🧬 Limb sealed: {limb}\n")
            log("🎬 Cinematic override triggered by dynasty expansion.")
        except Exception as e:
            log("❌ Cinematic override failed: " + str(e))

def main():
    log("🚀 EMPRESS72 dynasty expansion limb initiated.")
    worthy, rejected = scout_new_terrain()
    if worthy:
        limb_files = [generate_limb(name) for name in worthy]
        inject_to_cockpit([lf for lf in limb_files if lf])
        governance_report(worthy, rejected)
        cinematic_override(limb_files)
    else:
        log("🛑 No terrain met dynasty threshold. Expansion deferred.")
        governance_report([], rejected)
    log("✅ Dynasty expansion cycle complete.")

if __name__ == "__main__":
    main()
